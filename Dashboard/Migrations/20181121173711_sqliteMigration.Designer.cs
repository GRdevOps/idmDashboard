// <auto-generated />
using System;
using Dashboard.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Dashboard.Migrations
{
    [DbContext(typeof(IDMDBContext))]
    [Migration("20181121173711_sqliteMigration")]
    partial class sqliteMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Dashboard.Models.DriverModel", b =>
                {
                    b.Property<int>("DriverId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CurrentCache");

                    b.Property<string>("DriverName");

                    b.Property<int>("PreviousCache");

                    b.Property<int?>("ServerId");

                    b.Property<string>("Status");

                    b.HasKey("DriverId");

                    b.HasIndex("ServerId");

                    b.ToTable("DriverModels");
                });

            modelBuilder.Entity("Dashboard.Models.MessageModel", b =>
                {
                    b.Property<int>("MessageId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("DriverId");

                    b.Property<string>("Message");

                    b.Property<DateTime>("MessageDate");

                    b.Property<string>("MessageType");

                    b.Property<int>("ServerId");

                    b.HasKey("MessageId");

                    b.HasIndex("DriverId");

                    b.HasIndex("ServerId");

                    b.ToTable("MessageModels");
                });

            modelBuilder.Entity("Dashboard.Models.ServerGroupModel", b =>
                {
                    b.Property<int>("ServerGroupId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ServerGroupName");

                    b.HasKey("ServerGroupId");

                    b.ToTable("ServerGroupModels");
                });

            modelBuilder.Entity("Dashboard.Models.ServerModel", b =>
                {
                    b.Property<int>("ServerId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ServerGroupId");

                    b.Property<string>("ServerName");

                    b.HasKey("ServerId");

                    b.HasIndex("ServerGroupId");

                    b.ToTable("ServerModels");
                });

            modelBuilder.Entity("Dashboard.Models.DriverModel", b =>
                {
                    b.HasOne("Dashboard.Models.ServerModel", "Server")
                        .WithMany("Drivers")
                        .HasForeignKey("ServerId");
                });

            modelBuilder.Entity("Dashboard.Models.MessageModel", b =>
                {
                    b.HasOne("Dashboard.Models.DriverModel", "Driver")
                        .WithMany("Messages")
                        .HasForeignKey("DriverId");

                    b.HasOne("Dashboard.Models.ServerModel", "Server")
                        .WithMany("Messages")
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Dashboard.Models.ServerModel", b =>
                {
                    b.HasOne("Dashboard.Models.ServerGroupModel", "ServerGroup")
                        .WithMany("Servers")
                        .HasForeignKey("ServerGroupId");
                });
#pragma warning restore 612, 618
        }
    }
}
